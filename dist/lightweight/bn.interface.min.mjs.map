{"version":3,"file":"bn.interface.min.mjs","sources":["../../src/biginteger/bn.interface.js"],"sourcesContent":["import BN from 'bn.js';\n\n/**\n * BigInteger implementation of basic operations\n * Wrapper of bn.js library (wwww.github.com/indutny/bn.js)\n */\nexport default class BigInteger {\n  /**\n   * Get a BigInteger (input must be big endian for strings and arrays)\n   * @param {Number|String|Uint8Array} n value to convert\n   * @throws {Error} on undefined input\n   */\n  constructor(n) {\n    if (n === undefined) {\n      throw new Error('Invalid BigInteger input');\n    }\n\n    this.value = new BN(n);\n  }\n\n  clone() {\n    const clone = new BigInteger(null);\n    this.value.copy(clone.value);\n    return clone;\n  }\n\n  /**\n   * BigInteger increment in place\n   */\n  iinc() {\n    this.value.iadd(one.value);\n    return this;\n  }\n\n  /**\n   * BigInteger increment\n   * @returns {BigInteger} this + 1\n   */\n  inc() {\n    return this.clone().iinc();\n  }\n\n  /**\n   * BigInteger decrement in place\n   */\n  idec() {\n    this.value.isub(one.value);\n    return this;\n  }\n\n  /**\n   * BigInteger decrement\n   * @returns {BigInteger} this - 1\n   */\n  dec() {\n    return this.clone().idec();\n  }\n\n\n  /**\n   * BigInteger addition in place\n   * @param {BigInteger} x value to add\n   */\n  iadd(x) {\n    this.value.iadd(x.value);\n    return this;\n  }\n\n  /**\n   * BigInteger addition\n   * @param {BigInteger} x value to add\n   * @returns {BigInteger} this + x\n   */\n  add(x) {\n    return this.clone().iadd(x);\n  }\n\n  /**\n   * BigInteger subtraction in place\n   * @param {BigInteger} x value to subtract\n   */\n  isub(x) {\n    this.value.isub(x.value);\n    return this;\n  }\n\n  /**\n   * BigInteger subtraction\n   * @param {BigInteger} x value to subtract\n   * @returns {BigInteger} this - x\n   */\n  sub(x) {\n    return this.clone().isub(x);\n  }\n\n  /**\n   * BigInteger multiplication in place\n   * @param {BigInteger} x value to multiply\n   */\n  imul(x) {\n    this.value.imul(x.value);\n    return this;\n  }\n\n  /**\n   * BigInteger multiplication\n   * @param {BigInteger} x value to multiply\n   * @returns {BigInteger} this * x\n   */\n  mul(x) {\n    return this.clone().imul(x);\n  }\n\n  /**\n   * Compute value modulo m, in place\n   * @param {BigInteger} m modulo\n   */\n  imod(m) {\n    this.value = this.value.umod(m.value);\n    return this;\n  }\n\n  /**\n   * Compute value modulo m\n   * @param {BigInteger} m modulo\n   * @returns {BigInteger} this mod m\n   */\n  mod(m) {\n    return this.clone().imod(m);\n  }\n\n  /**\n   * Compute modular exponentiation\n   * Much faster than this.exp(e).mod(n)\n   * @param {BigInteger} e exponent\n   * @param {BigInteger} n modulo\n   * @returns {BigInteger} this ** e mod n\n   */\n  modExp(e, n) {\n    // We use either Montgomery or normal reduction context\n    // Montgomery requires coprime n and R (montogmery multiplier)\n    //  bn.js picks R as power of 2, so n must be odd\n    const nred = n.isEven() ? BN.red(n.value) : BN.mont(n.value);\n    const x = this.clone();\n    x.value = x.value.toRed(nred).redPow(e.value).fromRed();\n    return x;\n  }\n\n  /**\n   * Compute the inverse of this value modulo n\n   * Note: this and and n must be relatively prime\n   * @param {BigInteger} n modulo\n   * @return {BigInteger} x such that this*x = 1 mod n\n   */\n  modInv(n) {\n    return new BigInteger(this.value.invm(n.value));\n  }\n\n  /**\n   * Compute greatest common divisor between this and n\n   * @param {BigInteger} n operand\n   * @return {BigInteger} gcd\n   */\n  gcd(n) {\n    return new BigInteger(this.value.gcd(n.value));\n  }\n\n  /**\n   * Shift this to the left by x, in place\n   * @param {BigInteger} x shift value\n   */\n  ileftShift(x) {\n    this.value.ishln(x.value.toNumber());\n    return this;\n  }\n\n  /**\n   * Shift this to the left by x\n   * @param {BigInteger} x shift value\n   * @returns {BigInteger} this << x\n   */\n  leftShift(x) {\n    return this.clone().ileftShift(x);\n  }\n\n  /**\n   * Shift this to the right by x, in place\n   * @param {BigInteger} x shift value\n   */\n  irightShift(x) {\n    this.value.ishrn(x.value.toNumber());\n    return this;\n  }\n\n  /**\n   * Shift this to the right by x\n   * @param {BigInteger} x shift value\n   * @returns {BigInteger} this >> x\n   */\n  rightShift(x) {\n    return this.clone().irightShift(x);\n  }\n\n  /**\n   * Whether this value is equal to x\n   * @param {BigInteger} x\n   * @returns {Boolean}\n   */\n  equal(x) {\n    return this.value.eq(x.value);\n  }\n\n  /**\n   * Whether this value is less than x\n   * @param {BigInteger} x\n   * @returns {Boolean}\n   */\n  lt(x) {\n    return this.value.lt(x.value);\n  }\n\n  /**\n   * Whether this value is less than or equal to x\n   * @param {BigInteger} x\n   * @returns {Boolean}\n   */\n  lte(x) {\n    return this.value.lte(x.value);\n  }\n\n  /**\n   * Whether this value is greater than x\n   * @param {BigInteger} x\n   * @returns {Boolean}\n   */\n  gt(x) {\n    return this.value.gt(x.value);\n  }\n\n  /**\n   * Whether this value is greater than or equal to x\n   * @param {BigInteger} x\n   * @returns {Boolean}\n   */\n  gte(x) {\n    return this.value.gte(x.value);\n  }\n\n  isZero() {\n    return this.value.isZero();\n  }\n\n  isOne() {\n    return this.equal(one);\n  }\n\n  isNegative() {\n    return this.value.isNeg();\n  }\n\n  isEven() {\n    return this.value.isEven();\n  }\n\n  abs() {\n    const res = this.clone();\n    res.value = res.value.abs();\n    return res;\n  }\n\n  /**\n   * Get this value as a string\n   * @returns {String} this value\n   */\n  toString() {\n    return this.value.toString();\n  }\n\n  /**\n   * Get this value as an exact Number (max 53 bits)\n   * Fails if this value is too large\n   * @return {Number}\n   */\n  toNumber() {\n    return this.value.toNumber();\n  }\n\n  /**\n   * Get value of i-th bit\n   * @param {Number} i bit index\n   * @returns {Number} bit value\n   */\n  getBit(i) {\n    return this.value.testn(i) ? 1 : 0;\n  }\n\n  /**\n   * Compute bit length\n   * @returns {Number} bit length\n   */\n  bitLength() {\n    return this.value.bitLength();\n  }\n\n  /**\n   * Compute byte length\n   * @returns {Number} byte length\n   */\n  byteLength() {\n    return this.value.byteLength();\n  }\n\n  /**\n   * Get Uint8Array representation of this number\n   * @param {String} endian endianess of output array (defaults to 'be')\n   * @param {Number} length of output array\n   * @return {Uint8Array}\n   */\n  toUint8Array(endian = 'be', length) {\n    return this.value.toArrayLike(Uint8Array, endian, length);\n  }\n}\n\nconst one = new BigInteger(1);\n"],"names":["BigInteger","[object Object]","n","undefined","Error","this","value","BN","clone","copy","iadd","one","iinc","isub","idec","x","imul","m","umod","imod","e","nred","isEven","red","mont","toRed","redPow","fromRed","invm","gcd","ishln","toNumber","ileftShift","ishrn","irightShift","eq","lt","lte","gt","gte","isZero","equal","isNeg","res","abs","toString","i","testn","bitLength","byteLength","endian","length","toArrayLike","Uint8Array"],"mappings":";yJAMe,MAAMA,EAMnBC,YAAYC,GACV,QAAUC,IAAND,EACF,MAAUE,MAAM,4BAGlBC,KAAKC,MAAQ,IAAIC,EAAGL,GAGtBD,QACE,MAAMO,EAAQ,IAAIR,EAAW,MAE7B,OADAK,KAAKC,MAAMG,KAAKD,EAAMF,OACfE,EAMTP,OAEE,OADAI,KAAKC,MAAMI,KAAKC,EAAIL,OACbD,KAOTJ,MACE,OAAOI,KAAKG,QAAQI,OAMtBX,OAEE,OADAI,KAAKC,MAAMO,KAAKF,EAAIL,OACbD,KAOTJ,MACE,OAAOI,KAAKG,QAAQM,OAQtBb,KAAKc,GAEH,OADAV,KAAKC,MAAMI,KAAKK,EAAET,OACXD,KAQTJ,IAAIc,GACF,OAAOV,KAAKG,QAAQE,KAAKK,GAO3Bd,KAAKc,GAEH,OADAV,KAAKC,MAAMO,KAAKE,EAAET,OACXD,KAQTJ,IAAIc,GACF,OAAOV,KAAKG,QAAQK,KAAKE,GAO3Bd,KAAKc,GAEH,OADAV,KAAKC,MAAMU,KAAKD,EAAET,OACXD,KAQTJ,IAAIc,GACF,OAAOV,KAAKG,QAAQQ,KAAKD,GAO3Bd,KAAKgB,GAEH,OADAZ,KAAKC,MAAQD,KAAKC,MAAMY,KAAKD,EAAEX,OACxBD,KAQTJ,IAAIgB,GACF,OAAOZ,KAAKG,QAAQW,KAAKF,GAU3BhB,OAAOmB,EAAGlB,GAIR,MAAMmB,EAAOnB,EAAEoB,SAAWf,EAAGgB,IAAIrB,EAAEI,OAASC,EAAGiB,KAAKtB,EAAEI,OAChDS,EAAIV,KAAKG,QAEf,OADAO,EAAET,MAAQS,EAAET,MAAMmB,MAAMJ,GAAMK,OAAON,EAAEd,OAAOqB,UACvCZ,EASTd,OAAOC,GACL,OAAO,IAAIF,EAAWK,KAAKC,MAAMsB,KAAK1B,EAAEI,QAQ1CL,IAAIC,GACF,OAAO,IAAIF,EAAWK,KAAKC,MAAMuB,IAAI3B,EAAEI,QAOzCL,WAAWc,GAET,OADAV,KAAKC,MAAMwB,MAAMf,EAAET,MAAMyB,YAClB1B,KAQTJ,UAAUc,GACR,OAAOV,KAAKG,QAAQwB,WAAWjB,GAOjCd,YAAYc,GAEV,OADAV,KAAKC,MAAM2B,MAAMlB,EAAET,MAAMyB,YAClB1B,KAQTJ,WAAWc,GACT,OAAOV,KAAKG,QAAQ0B,YAAYnB,GAQlCd,MAAMc,GACJ,OAAOV,KAAKC,MAAM6B,GAAGpB,EAAET,OAQzBL,GAAGc,GACD,OAAOV,KAAKC,MAAM8B,GAAGrB,EAAET,OAQzBL,IAAIc,GACF,OAAOV,KAAKC,MAAM+B,IAAItB,EAAET,OAQ1BL,GAAGc,GACD,OAAOV,KAAKC,MAAMgC,GAAGvB,EAAET,OAQzBL,IAAIc,GACF,OAAOV,KAAKC,MAAMiC,IAAIxB,EAAET,OAG1BL,SACE,OAAOI,KAAKC,MAAMkC,SAGpBvC,QACE,OAAOI,KAAKoC,MAAM9B,GAGpBV,aACE,OAAOI,KAAKC,MAAMoC,QAGpBzC,SACE,OAAOI,KAAKC,MAAMgB,SAGpBrB,MACE,MAAM0C,EAAMtC,KAAKG,QAEjB,OADAmC,EAAIrC,MAAQqC,EAAIrC,MAAMsC,MACfD,EAOT1C,WACE,OAAOI,KAAKC,MAAMuC,WAQpB5C,WACE,OAAOI,KAAKC,MAAMyB,WAQpB9B,OAAO6C,GACL,OAAOzC,KAAKC,MAAMyC,MAAMD,GAAK,EAAI,EAOnC7C,YACE,OAAOI,KAAKC,MAAM0C,YAOpB/C,aACE,OAAOI,KAAKC,MAAM2C,aASpBhD,aAAaiD,EAAS,KAAMC,GAC1B,OAAO9C,KAAKC,MAAM8C,YAAYC,WAAYH,EAAQC,IAItD,MAAMxC,EAAM,IAAIX,EAAW"}